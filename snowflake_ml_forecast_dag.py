# -*- coding: utf-8 -*-
"""snowflake_ml_forecast_dag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A_jJXXSfUyQyTgFtgO1YztCTwuSdo5fs
"""

"""
DAG: ml_forecast_pipeline_dag
Purpose: Train and forecast stock prices using Snowflake ML.FORECAST and union ETL + forecast tables.
Author: Vedika & Aakash
Date: 2025-10-06
"""
!pip install snowflake-connector-python pandas numpy scikit-learn python-dotenv yfinance
!pip install apache-airflow apache-airflow-providers-snowflake
from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.sensors.external_task import ExternalTaskSensor
from datetime import datetime, timedelta

import yfinance as yf
import pandas as pd
import time
from datetime import datetime, timezone

USER_ID = Variable.get("snowflake_userid")
PASSWORD = Variable.get("snowflake_password")
ACCOUNT = Variable.get("snowflake_account")
WAREHOUSE = Variable.get("snowflake_warehouse")
DATABASE = Variable.get("snowflake_database")

# -------------------------------------------------------------------
# Utility: return a live Snowflake cursor
# -------------------------------------------------------------------
def return_snowflake_conn():
    hook = SnowflakeHook(snowflake_conn_id="my_snowflake_connection")
    conn = hook.get_conn()
    return conn.cursor()

default_args = {
    "owner": "ml-eng",
    "retries": 1,
    "retry_delay": timedelta(minutes=5),
}
# -------------------------------------------------------------------
# Declare Variables
# -------------------------------------------------------------------
train_input_table = "raw.stock_price"
train_view = "raw.stock_price_view"
forecast_table = "analytics.stock_price_forecast"
forecast_function_name = "analytics.predict_stock_price"
final_table = "analytics.Stock_price_final"

# -------------------------------------------------------------------
# Task 1: Train model using Snowflake ML.FORECAST
# -------------------------------------------------------------------
@task
def train(cur, train_input_table, train_view, forecast_function_name):
    """
    Creates a Snowflake view on ETL data and trains a Snowflake ML.FORECAST model.
    Uses try/except and SQL transaction for robustness.
    """
    create_view_sql = f"""
        CREATE OR REPLACE VIEW {train_view} AS
        SELECT DATE, CLOSE, SYMBOL
        FROM {train_input_table}
        WHERE CLOSE IS NOT NULL AND SYMBOL IS NOT NULL;
    """

    create_model_sql = f"""
        CREATE OR REPLACE SNOWFLAKE.ML.FORECAST {forecast_function_name} (
            INPUT_DATA => SYSTEM$REFERENCE('VIEW', '{train_view}'),
            SERIES_COLNAME => 'SYMBOL',
            TIMESTAMP_COLNAME => 'DATE',
            TARGET_COLNAME => 'CLOSE',
            CONFIG_OBJECT => {{ 'ON_ERROR': 'SKIP' }}
        );
    """

    evaluate_sql = f"CALL {forecast_function_name}!SHOW_EVALUATION_METRICS();"

    try:
        cur.execute("BEGIN;")
        cur.execute(create_view_sql)
        cur.execute(create_model_sql)
        cur.execute(evaluate_sql)
        cur.execute("COMMIT;")
        print("Model training completed successfully.")
    except Exception as e:
        cur.execute("ROLLBACK;")
        print("Error during training:", e)
        raise

# -------------------------------------------------------------------
# Task 2: Generate forecasts, union ETL + forecast, and create final table
# -------------------------------------------------------------------
@task
def predict(cur, forecast_function_name, train_input_table, forecast_table, final_table):
    """
    - Generates predictions via ML.FORECAST
    - Joins metadata if needed
    - Unions predictions with historical ETL data to create a final analytics table
    - Includes SQL transaction and try/except handling
    """
    # Forecast into a temporary result set, store in forecast_table
    make_prediction_sql = f"""
        BEGIN
            CALL {forecast_function_name}!FORECAST(
                FORECASTING_PERIODS => 7,
                CONFIG_OBJECT => {{'prediction_interval': 0.95}}
            );
            LET x := SQLID;
            CREATE OR REPLACE TABLE {forecast_table} AS
            SELECT *
            FROM TABLE(RESULT_SCAN(:x));
        END;
    """

    # Join forecast output with SYMBOL info (if needed)
    join_sql = f"""
        CREATE OR REPLACE TEMP TABLE joined_forecast AS
        SELECT
            f.series AS symbol_json,
            f.ts AS forecast_date,
            f.forecast,
            f.lower_bound,
            f.upper_bound
        FROM {forecast_table} f
        INNER JOIN (
            SELECT DISTINCT SYMBOL FROM {train_input_table}
        ) s
        ON REPLACE(f.series, '"', '') = s.SYMBOL;
    """

    # Union actual + forecast into final analytics table
    create_final_table_sql = f"""
        CREATE OR REPLACE TABLE {final_table} AS
        SELECT
            SYMBOL,
            DATE,
            CLOSE AS actual,
            NULL AS forecast,
            NULL AS lower_bound,
            NULL AS upper_bound
        FROM {train_input_table}
        UNION ALL
        SELECT
            REPLACE(symbol_json, '"', '') AS SYMBOL,
            forecast_date AS DATE,
            NULL AS actual,
            forecast,
            lower_bound,
            upper_bound
        FROM joined_forecast;
    """

    try:
        cur.execute("BEGIN;")
        cur.execute(make_prediction_sql)
        cur.execute(join_sql)
        cur.execute(create_final_table_sql)
        cur.execute("COMMIT;")
        print("Forecasting and union completed successfully.")
    except Exception as e:
        cur.execute("ROLLBACK;")
        print("Error during prediction:", e)
        raise

# -------------------------------------------------------------------
# DAG Definition
# -------------------------------------------------------------------
with DAG(
    dag_id='ml_forecast_pipeline_dag',
    start_date=datetime(2025, 1, 1),
    catchup=False,
    tags=['ML', 'Forecast', 'Snowflake'],
    default_args= default_args,
    description="Train and forecast stock prices using Snowflake ML.FORECAST and union ETL + forecast data.",
) as dag:

    # Read from Airflow Variables (configured in UI)
    train_input_table = Variable.get("train_input_table", default_var="raw.stock_prices")
    train_view = Variable.get("train_view", default_var="raw.stock_prices_view")
    forecast_table = Variable.get("forecast_table", default_var="analytics.stock_forecast")
    forecast_function_name = Variable.get("forecast_function_name", default_var="analytics.forecast_stock_prices")
    final_table = Variable.get("final_table", default_var="analytics.stock_prices_final")

    cur = return_snowflake_conn()

    # Tasks
    train_task = train(cur, train_input_table, train_view, forecast_function_name)
    predict_task = predict(cur, forecast_function_name, train_input_table, forecast_table, final_table)

    # Dependencies
    train_task >> predict_task